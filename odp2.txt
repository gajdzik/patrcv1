1. Czym jest stos (stack), czym jest sterta (heap)?
Stos to obszar pamiêci w przestrzeni adresowej programu. Stos jest obs³ugiwany
automatycznie i charakteryzuje siê LIFO (ostatni przyszed³, wiêc jako pierwszy 
wychodzi). Na stosie przechowywane s¹ zmienne lokalne, argumenty wywo³ania 
funkcji, wartoœæ zwracana przez funkcjê, adres wywo³ania funkcji.
Sterta to obszar pamiêci udostêpniany przez system operacyjny wszystkim 
dzia³aj¹cym programom. Na stercie przechowywane s¹ dynamicznie tworzone 
struktury danych, dynamicznie przydzielane obszary pamiêci.

2. Czym jest wskaŸnik?
WskaŸnik to specjalny rodzaj zmiennej, w której zapisywany jest adres w pamiêci 
komputera. Deklaruje siê wskaŸnik poprzez "*" np. int *ptr;

3. Czym jest wskaŸnik na wskaŸnik i jakie mo¿e mieæ zastosowania?
Jest to wskaŸnik, który wskazuje na wskaŸnik, który wskazuje zmienna (np.
int x=5, int *y=&x, int **z=&y) WskaŸnik na wskaŸnik mo¿e byæ u¿yty do 
dynamicznego alokowanie pamiêci np. tablicy, która ma w pierwszym wierszu 
cztery kolumny, a w drugim ju¿ tylko dwie. Takie wskaŸniki slu¿¹ do szybkiego
przemieszczania siê pomiêdzy danymi oraz przyœpieszaj¹ pracê, bo komputer
dostaje od razu adres zmiennej i nie musi za ka¿dym razem jej szukaæ.

4. Na czym polega arytmetyka wskaŸników?
Arytmetyka wskaŸników, polega na tym, ¿e mo¿na dodaj¹c lub odejmuj¹c w 
wskaŸnikach to przesuwamy siê po adresach (w zale¿noœci od typu wskaŸników, to
np. +1 przesunie adres o 4 do przodu). Dodaj¹c lub odejmuj¹c wskaŸniki od 
siebie dostaniemy liczbe o ile siê ró¿ni¹ oba adresy (np. o ile pól w tablicy
siê ró¿ni¹, a nie o ile adresu siê ró¿ni¹).

5. Omów konwersje typów.
Konwercja typów to zmiana typu zmiennej na inny. Przy zmianie typu przewa¿nie 
tracimy jak¹œ czêœæ danch, np. double x=5,678; int y=z; W wyniku tego w 'y' 
bêdziemy mieli tylko '5', bo int nie przechowuje wartoœci po przecinku.

6. Omów rzutowanie typów.
Rzutowanie jest to bezpieczna zamiana jednego typu na drugi typ. Np. zamiana
double na int wygl¹da tak int b= (int)zmienna_double.

7. Wymieñ sposoby rzutowania typów w C++
 Istnieje wiele rzutowañ standardowych (n. z int na double) i np. rzutowanie 
const_cast pozwala zrzutowaæ zmienn¹, która zmienn¹, która nie ma const ani 
volatile przed typem. Static_cast to rzutowanie w którym obiekt, musi byæ 
znany w momencie kompilacji. Dynamic_cast rzutowanie wskaŸników na obiekty. 
Reinterpret_cast rzutowanie umo¿liwiaj¹ce zmienianie znaczenia bitów.

8. Omów ró¿nicê pomiêdzy "while" a "do ... while".
Ró¿nica pomiêdzy while a do while jest taka, ¿e do while wykona siê zawsze 
co najmniej raz i dopiero póŸniej sprawdzi warunek stopu, a while najpierw 
sprawdzi warunek stopu, wiêc mo¿e siê wykonaæ 0 razy.

9. Opisz ró¿nicê pomiêdzy statyczn¹ a dynamiczn¹ alokacj¹ pamiêci.
Statyczne alokacja pamiêci wykonuje siê w momencie kompilacji kodu Ÿród³owego. 
Charakteryzuje siê prostym zapisem w kodzie oraz ³atw¹ obs³ug¹ statycznych 
obszarów pamiêci. Pamiêæ zwalniana jest dopiero w momencie zakoñczenia 
programu, a przydzielanie pamiêci jest nadmierna, gdy alokacja w 
programie jest zmiennej jest zmienna.
Dynamiczna alokacja wykonuje siê w trakcie dzia³ania programu. Charakteryzuje
siê elastycznym okreœlaniem zapotrzebowania na pamiêæ i mo¿liwoœcia zwolnienia
niewykorzystywanej ju¿ pamiêci. Mo¿e wyst¹piæ zjawisko "wycieku pamiêci".